@Library('shared-lib') _

pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    environment {
        SONAR_SCANNER_HOME = tool name: "sonar-scanner"
        PATH = "${SONAR_SCANNER_HOME}/bin:${env.PATH}"
    }

    parameters {
        string(name: 'FRONTEND_DOCKER_TAG', defaultValue: '', description: 'Docker image tag for frontend')
        string(name: 'BACKEND_DOCKER_TAG', defaultValue: '', description: 'Docker image tag for backend')
    }

    stages {
        stage("Validate: Docker Tags") {
            steps {
                script {
                    if (!params.FRONTEND_DOCKER_TAG) {
                        error "FRONTEND_DOCKER_TAG is required"
                    }
                    if (!params.BACKEND_DOCKER_TAG) {
                        error "BACKEND_DOCKER_TAG is required"
                    }
                }
            }
        }

        stage("Cleanup: Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Git: Clone ClearCut Repository") {
            steps {
                retry(2) {
                    script {
                        code_checkout(
                            repoUrl: "https://github.com/Debjyoti2004/ClearCut.git",
                            branch: "master",
                            credentialsId: "gitCredentials"
                        )
                    }
                }
            }
        }

        stage("Security: Filesystem Trivy Scan") {
            steps {
                script {
                    trivy_scan()
                }
            }
        }

        stage("Security: OWASP Dependency Check") {
            options {
                timeout(time: 40, unit: 'MINUTES')
            }
            steps {
                script {
                    runDependencyCheck()
                }
            }
        }

        stage("Static Code Analysis: SonarQube Scan") {
            steps {
                script {
                    runSonarQubeScan("sonar-scanner", "ClearCut", "ClearCut")
                }
            }
        }

        stage("Static Code Analysis: Quality Gate") {
            steps {
                script {
                    runSonarQubeQualityGate()
                }
            }
        }

        stage("Environment: Frontend ENV Setup") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-access', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        dir("automation") {
                            sh '''
                                export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                                export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                                export AWS_REGION=ap-south-1

                                chmod +x updatefrontendenv.sh
                                ./updatefrontendenv.sh
                            '''
                        }
                    }
                }
            }
        }

        stage("Docker: Build Backend Image") {
            steps {
                script {
                    build_docker_image(
                        imageName: 'debjyoti08/clearcut_backend',
                        imageTag: params.BACKEND_DOCKER_TAG,
                        dockerfile: 'backend/Dockerfile',
                        context: 'backend'
                    )
                }
            }
        }

        stage("Docker: Build Frontend Image") {
            steps {
                script {
                    build_docker_image(
                        imageName: 'debjyoti08/clearcut_frontend',
                        imageTag: params.FRONTEND_DOCKER_TAG,
                        dockerfile: 'frontend/Dockerfile',
                        context: 'frontend'
                    )
                }
            }
        }

        stage("Trivy: Frontend Image") {
            steps {
                script {
                    trivy_image_scan(
                        imageName: 'debjyoti08/clearcut_frontend',
                        imageTag: params.FRONTEND_DOCKER_TAG
                    )
                }
            }
        }

        stage("Docker: Push Backend Image") {
            steps {
                script {
                    push_docker_image(
                        imageName: 'debjyoti08/clearcut_backend',
                        imageTag: params.BACKEND_DOCKER_TAG,
                        credentials: 'docker-hub-credentials'
                    )
                }
            }
        }

        stage("Docker: Push Frontend Image") {
            steps {
                script {
                    push_docker_image(
                        imageName: 'debjyoti08/clearcut_frontend',
                        imageTag: params.FRONTEND_DOCKER_TAG,
                        credentials: 'docker-hub-credentials'
                    )
                }
            }
        }
    }

    post {
        success {
            echo "[‚úÖ] Build succeeded. Triggering CD pipeline..."

            archiveArtifacts artifacts: '*.xml', followSymlinks: false

            build job: "ClearCut-CD", parameters: [
                string(name: 'FRONTEND_DOCKER_TAG', value: "${params.FRONTEND_DOCKER_TAG}"),
                string(name: 'BACKEND_DOCKER_TAG', value: "${params.BACKEND_DOCKER_TAG}")
            ]

            mail(
                to: 'debjyotishit27@gmail.com',
                subject: "‚úÖ CI Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """\
<!DOCTYPE html>
<html>
<body style="font-family: Arial, sans-serif;">

<h2 style="color: green;">‚úÖ CI Build Successful</h2>

<table cellspacing="5" cellpadding="5">
<tr><td><b>üõ†Ô∏è Job:</b></td><td>${env.JOB_NAME}</td></tr>
<tr><td><b>üî¢ Build Number:</b></td><td>${env.BUILD_NUMBER}</td></tr>
<tr><td><b>üåê Build URL:</b></td><td><a href="${env.BUILD_URL}">${env.BUILD_URL}</a></td></tr>
<tr><td><b>üê≥ Frontend Tag:</b></td><td>${params.FRONTEND_DOCKER_TAG}</td></tr>
<tr><td><b>üê≥ Backend Tag:</b></td><td>${params.BACKEND_DOCKER_TAG}</td></tr>
<tr><td><b>üë§ Triggered By:</b></td><td>${currentBuild.getBuildCauses()[0].shortDescription}</td></tr>
</table>

<br>
<p>The CI build has completed successfully and all Docker images have been built, scanned, and pushed. The CD pipeline (<b>ClearCut-CD</b>) has also been triggered automatically.</p>

<hr>
<p style="color: #666;"><i>This is an automated message. Please do not reply directly to this email.</i></p>

</body>
</html>
""",
                mimeType: 'text/html',
                replyTo: 'debjyotishit8@gmail.com'
            )
        }

        failure {
            echo "[‚ùå] Build failed. Sending notification..."

            mail(
                to: 'debjyotishit27@gmail.com',
                subject: "‚ùå CI Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """\
<!DOCTYPE html>
<html>
<body style="font-family: Arial, sans-serif;">

<h2 style="color: red;">‚ùå CI Build Failed</h2>

<table cellspacing="5" cellpadding="5">
<tr><td><b>üõ†Ô∏è Job:</b></td><td>${env.JOB_NAME}</td></tr>
<tr><td><b>üî¢ Build Number:</b></td><td>${env.BUILD_NUMBER}</td></tr>
<tr><td><b>üåê Build URL:</b></td><td><a href="${env.BUILD_URL}">${env.BUILD_URL}</a></td></tr>
<tr><td><b>üê≥ Frontend Tag:</b></td><td>${params.FRONTEND_DOCKER_TAG}</td></tr>
<tr><td><b>üê≥ Backend Tag:</b></td><td>${params.BACKEND_DOCKER_TAG}</td></tr>
<tr><td><b>üë§ Triggered By:</b></td><td>${currentBuild.getBuildCauses()[0].shortDescription}</td></tr>
</table>

<br>
<p style="color: #a00;"><b>Action Required:</b> Please review the Jenkins console logs and take appropriate steps to resolve the issue.</p>

<hr>
<p style="color: #666;"><i>This is an automated message. Please do not reply directly to this email.</i></p>

</body>
</html>
""",
                mimeType: 'text/html',
                replyTo: 'debjyotishit8@gmail.com'
            )
        }

        always {
            echo "[‚ÑπÔ∏è] CI process completed."
        }
    }
}
